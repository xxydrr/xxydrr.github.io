<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>搞搞震iBB</title>
  
  <subtitle>前端博客，爱设计，知识分享，瞎折腾新事物的切图仔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://180231.xyz/"/>
  <updated>2020-10-29T08:27:57.861Z</updated>
  <id>http://180231.xyz/</id>
  
  <author>
    <name>搞搞震iBB</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实训时对css知识的查漏补缺</title>
    <link href="http://180231.xyz/2020/10/29/%E5%AE%9E%E8%AE%AD%E6%97%B6%E5%AF%B9css%E7%9F%A5%E8%AF%86%E7%9A%84%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    <id>http://180231.xyz/2020/10/29/%E5%AE%9E%E8%AE%AD%E6%97%B6%E5%AF%B9css%E7%9F%A5%E8%AF%86%E7%9A%84%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</id>
    <published>2020-10-29T08:23:23.977Z</published>
    <updated>2020-10-29T08:27:57.861Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 29 2020 16:33:45 GMT+0800 (GMT+08:00) --><h2 id="技能学习"><a href="#技能学习" class="headerlink" title="技能学习"></a>技能学习</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;width:400px; height:200px;&quot;&gt;</span><br><span class="line">  &lt;span style&#x3D;&quot;float:left; width:auto; height:100%;&quot;&gt;</span><br><span class="line">   &lt;i style&#x3D;&quot;position:absolute;float:left; width:100px; height:50px;&quot;&gt;hello&lt;&#x2F;i&gt;</span><br><span class="line">  &lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>问题：span 标签的width 和height 分别为多少？（ ）</p><p>A . width =0px，height = 0px</p><p>B . width =400px，height = 200px</p><p>C . width =100px，height = 50px</p><p>D . width =0px，height = 200px</p><p>解释：span是行内元素设置宽高无效，但是float:left促发BFC，对行内元素促发BFC相当云把行内元素变成行内块元素，所以width的auto也就不能自动继承父元素了，于是width=0，而高度为100%则是父元素的高度，所以选D（不懂的自己敲一下就懂了）</p><h2><a href="#" class="headerlink"></a></h2><h3 id="1-1-浏览器的分类"><a href="#1-1-浏览器的分类" class="headerlink" title="1.1   浏览器的分类"></a>1.1 浏览器的分类</h3><p>国外：</p><p>ie，chrome，火狐，欧朋，苹果Safari(ios,imac)</p><p>已经退出历史舞台的浏览器：网景公司</p><p>国内：</p><p>QQ,360,baidu,uc,猎豹,遨游,搜狗 – 不入流的浏览器</p><h3 id="1-2-浏览器内核"><a href="#1-2-浏览器内核" class="headerlink" title="1.2    浏览器内核"></a>1.2 浏览器内核</h3><p>浏览器内核就是用来渲染网页效果的</p><p>1、IE浏览器内核：Trident内核，也是俗称的IE内核；</p><p>2、Chrome浏览器内核：统称为Chromium内核或Chrome内核，以前是Webkit内核，现在是Blink内核；</p><p>3、Firefox浏览器内核：Gecko内核，俗称Firefox内核；</p><p>4、Safari浏览器内核：Webkit内核；</p><p>5、Opera浏览器内核：最初是自己的Presto内核，后来是Webkit，现在是Blink内核；</p><p>6、360浏览器、猎豹浏览器内核：IE+Chrome双内核；</p><p>7、搜狗、遨游、QQ浏览器内核：Trident（兼容模式）+Webkit（高速模式）；</p><p>8、百度浏览器、世界之窗内核：IE内核；</p><p>2345浏览器内核：以前是IE内核，现在也是IE+Chrome双内核；</p><h3 id="1-3走马灯标签-已经过时，请不要再使用"><a href="#1-3走马灯标签-已经过时，请不要再使用" class="headerlink" title="1.3走马灯标签(已经过时，请不要再使用)"></a>1.3走马灯标签(已经<strong>过时</strong>，请不要再使用)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;marquee behavior&#x3D;&quot;alternate&quot; direction&#x3D;&quot;right&quot;&gt;来回滚动的文字&lt;&#x2F;marquee&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20201029162216.gif" alt=""></p><p>主要属性：</p><p>​ behavior：alternate(来回滚动)|scroll(单方向循环滚动)|slide(只滚动一次)</p><p>​ bgcolor:文字滚动范围的背景颜色</p><p>​ direction:文字滚动的方向 down|left|right|up</p><p>​ width、height:范围大小</p><p>​ hspace和vspace:这两个属性决定滚动矩形区域距周围的空白区域.</p><p>​ loop:滚动次数，缺省是无限循环。-1或infinite将无限循环。</p><p>​ scrollamount和scrolldelay:文字滚动的速度(scrollamount)和延时(scrolldelay)，参数值都是正整数。</p><p>​ onmouseover=this.stop() onmouseout=this.start() 表示当鼠标以上区域的时候滚动停止，当鼠标移开的时候又继续滚动。</p><h3 id="1-4-Doctype"><a href="#1-4-Doctype" class="headerlink" title="1.4           Doctype"></a>1.4 Doctype</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure><p>Doctype的作用：告诉浏览器，以哪一个标准去解析页面</p><p>删除doctype，则没有告诉浏览器的解析方案，浏览器会按照(quirks mode怪异模式)各个浏览器自己的方案去解析</p><h3 id="1-5-表单"><a href="#1-5-表单" class="headerlink" title="1.5  表单"></a>1.5 表单</h3><h1 id="1-表单"><a href="#1-表单" class="headerlink" title="1           表单"></a>1 表单</h1><p>表单是用在网页上唯一能操作的地方，也是用户唯一与数据库产生关联的地方。</p><p>表单的作用：向后台数据库提交数据或查询数据。</p><table><thead><tr><th>标签</th><th>属性</th><th>值</th></tr></thead><tbody><tr><td>form</td><td>action</td><td>表示表单提交的后台地址</td></tr><tr><td>method</td><td>表单提交的方式：get|post ，get：以地址栏方式提交，post：以保密方式提交</td><td></td></tr><tr><td>enctype</td><td>application/x-www-form-urlencoded：普通表单的提交 multipart/form-data：有文件上传时的表单提交</td><td></td></tr><tr><td>input</td><td>type</td><td>设置表单的类型： text单行文本框 password：密码框 radio：单选按钮 checkbox：复选按钮 file：文件选择框 submit：提交按钮 reset：重置按钮 button：普通按钮 image：图片按钮 hidden：隐藏域</td></tr><tr><td>value</td><td>设置表单的缺省值，提交到后台的数据</td><td></td></tr><tr><td>name</td><td>表单必填的属性，提交给后台的数据</td><td></td></tr><tr><td>maxlength</td><td>表单输入的最大长度</td><td></td></tr><tr><td>size</td><td>表单的宽度</td><td></td></tr><tr><td>readonly</td><td>表单只读，表单能被提交</td><td></td></tr><tr><td>disabled</td><td>禁用表单，表单不能被提交</td><td></td></tr><tr><td>select</td><td>name</td><td>下拉列表</td></tr><tr><td>option</td><td>value</td><td>下拉列表选项，配合select使用</td></tr><tr><td>textarea</td><td>cols,rows</td><td>多行文本域，设置宽高</td></tr></tbody></table><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>如何实现在同一段文本实现中英文使用不同的字体？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-family: Cambria, 华文彩云;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20201029162209.png" alt=""></p><p>原来就是Cambria没有中文字体然后向后找，于是找到华文彩云这个字体</p><p>注意：设置字体时候备用字体使用常用的放到后面，因为字体查找是在本机字体库如window的font文件夹下的字体</p><h3 id="css选择器权重问题"><a href="#css选择器权重问题" class="headerlink" title="css选择器权重问题"></a>css选择器权重问题</h3><ol><li><code>!important</code></li><li>内联样式（1000）</li><li>ID 选择器（0100）</li><li>类选择器 / 属性选择器 / 伪类选择器（0010）</li><li>元素选择器 / 关系选择器 / 伪元素选择器（0001）</li><li>通配选择器（0000）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;test.css&quot;&gt;</span><br><span class="line">   &lt;style&gt;</span><br><span class="line">       .box &#123;</span><br><span class="line">           color: blue;</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>这两种方式加载按文档的加载顺序，后面覆盖前面样式的原则</p><p>慎用<code>!important</code>，因为在调试操作css样式或者js操作文档的元素改变样式的时候会因为权重问题失效</p><p><img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20201029162202.png" alt=""></p><h3 id="1-6-inline-block的坑"><a href="#1-6-inline-block的坑" class="headerlink" title="1.6 inline-block的坑"></a>1.6 inline-block的坑</h3><p>inline-block不可以完全代替float布局，也不建议。</p><p>坑1： 元素有字体的间距，需要使用letter-spacing设为合适的负数去掉或者设置父元素的字体大小为0，</p><p>坑2： 设置为display：inline-block后不能再使用display：none隐藏元素可能会对其他元素布局有影响</p><p><img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20201029162213.png" alt=""></p><h3 id="1-7-链接式与导入式的区别"><a href="#1-7-链接式与导入式的区别" class="headerlink" title="1.7  链接式与导入式的区别"></a>1.7 链接式与导入式的区别</h3><p>1、<link>标签是属于XHTML范畴的，@import是属于CSS2.1中特有的。</p><p>2、使用<link>链接的CSS是客户端浏览网页时先将外部CSS文件加载到网页当中，然后再进行编译显示，所以这种情况下显示出来的网页与用户预期的效果一样，即使网速再慢也一样的效果。</p><p>3、使用@import导入的CSS文件，客户端在浏览网页时是先将HTML结构呈现出来，再把外部CSS文件加载到网页当中，当然最终的效果也与使用<link>链接文件效果一样，只是当网速较慢时会先显示没有CSS统一布局的HTML网页，这样就会给用户很不好的感觉。这个也是现在目前大多少网站采用链接外部样式表的主要原因。</p><p>4、由于@import是属于CSS2.1中特有的，因此对于不兼容CSS2.1的浏览器来说就是无效的。</p><h3 id="1-1-继承性"><a href="#1-1-继承性" class="headerlink" title="1.1  继承性"></a>1.1 继承性</h3><p>作用：子元素可以继承父元素的样式。</p><p>什么样的属性才可以继承：text-,font-,line-开头的属性都是可以继承的</p><p>color.</p><p>特殊的标签：</p><p>1、a标签的颜色不能继承，如果一定要修改a标签的颜色直接作用在a标签上面。</p><p>2、h标签的大小不能继承，如果一定要修改h标签的大小直接作用在h标签上面。</p><p>3、div的高度如果不设置，由内容来决定（没有内容那么高度 为0），宽度默认由父元素继承过来。</p><p>不具有继承性的属性：边框、外边距、内边距、背景、定位、元素宽高属性。</p><p>恰当地使用继承可以简化代码，降低CSS样式的复杂性。</p><h2 id="-1"><a href="#-1" class="headerlink"></a></h2><p>子元素脱标父元素高度丢失，</p><p>1、设置父元素高度</p><p>2、父元素使用overflow：hidden，超出部分隐藏，适合没有超出内容的区域</p><p>3、加一个div使用clear：both</p><p>4、使用伪元素</p><h3 id="能用js实现的不用图片实现，能用css实现的不用js实现"><a href="#能用js实现的不用图片实现，能用css实现的不用js实现" class="headerlink" title="能用js实现的不用图片实现，能用css实现的不用js实现"></a>能用js实现的不用图片实现，能用css实现的不用js实现</h3><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 29 2020 16:33:45 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;技能学习&quot;&gt;&lt;a href=&quot;#技能学习&quot; class=&quot;headerlink&quot; title=&quot;技能学习&quot;&gt;&lt;/a&gt;技能学习&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="css" scheme="http://180231.xyz/categories/css/"/>
    
    
      <category term="css" scheme="http://180231.xyz/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli4搭建的vue项目在GitHub上演示,有手就行</title>
    <link href="http://180231.xyz/2020/09/07/vue-cli4%E6%90%AD%E5%BB%BA%E7%9A%84vue%E9%A1%B9%E7%9B%AE%E5%9C%A8GitHub%E4%B8%8A%E6%BC%94%E7%A4%BA/"/>
    <id>http://180231.xyz/2020/09/07/vue-cli4%E6%90%AD%E5%BB%BA%E7%9A%84vue%E9%A1%B9%E7%9B%AE%E5%9C%A8GitHub%E4%B8%8A%E6%BC%94%E7%A4%BA/</id>
    <published>2020-09-07T04:14:23.143Z</published>
    <updated>2020-09-07T04:18:05.796Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 29 2020 16:33:45 GMT+0800 (GMT+08:00) --><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​ 我们开源的vue新项目怎么在线上访问得到呢？购买服务器自己搭建？不需要。好好利用好github这平台就行了。</p><h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p><strong>第一步</strong></p><ul><li>这vue项目的根路径创建start.sh</li></ul><p><img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20200907111431.png" alt=""></p><p>然后在start.sh文件中配置以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 当发生错误时中止脚本</span><br><span class="line">set -e</span><br><span class="line"># 构建</span><br><span class="line">npm run build</span><br><span class="line"># cd 到构建输出的目录下 </span><br><span class="line">cd dist</span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &#39;start&#39;</span><br><span class="line"># 部署到 https:&#x2F;&#x2F;&lt;github用户名&gt;.github.io&#x2F;&lt;仓库名&gt;</span><br><span class="line">git push -f git@github.com:&lt;github用户名&gt;&#x2F;&lt;仓库名&gt;.git master:gh-pages</span><br><span class="line">cd -</span><br></pre></td></tr></table></figure><ul><li><p>在vue.config.js文件中配置以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F; 生产环境 sourceMap</span><br><span class="line">  productionSourceMap: false,</span><br><span class="line">  publicPath: process.env.NODE_ENV &#x3D;&#x3D;&#x3D; &#39;production&#39;</span><br><span class="line">    ? &#39;&#x2F;仓库名&#x2F;&#39;</span><br><span class="line">    : &#39;&#x2F;&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>第二步</strong></p><p>在当前项目根目录下右击打开git bash Here(一定要git打开不然执行不了.sh文件，我的是win10)</p><p>然后切换到主分支(默认)执行 sh start.sh （eslint报错自己修改）</p><p>然后github打开该项目的setting ，拉到下面GitHub Pages, 如我的</p><p><img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20200907113916.png" alt=""></p><p>点击网址就能访问了，这就大功告成了！网址是因为我的绑定了域名不然的应该为：<a href="https://xxxx.gihub.io/xxxx这个格式" target="_blank" rel="noopener">https://xxxx.gihub.io/xxxx这个格式</a></p><p>下面放上我的完整配置图</p><p><img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20200907114344.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20200907114348.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 29 2020 16:33:45 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;​ 我们开
      
    
    </summary>
    
    
      <category term="vue" scheme="http://180231.xyz/categories/vue/"/>
    
    
      <category term="vue" scheme="http://180231.xyz/tags/vue/"/>
    
      <category term="vue-cli4" scheme="http://180231.xyz/tags/vue-cli4/"/>
    
      <category term="github项目演示" scheme="http://180231.xyz/tags/github%E9%A1%B9%E7%9B%AE%E6%BC%94%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>原创vue+vuex仿telegram app的单页应用，实现分组功能消息发送</title>
    <link href="http://180231.xyz/2020/09/07/tg%E6%80%BB%E7%BB%93/"/>
    <id>http://180231.xyz/2020/09/07/tg%E6%80%BB%E7%BB%93/</id>
    <published>2020-09-07T04:14:23.139Z</published>
    <updated>2020-09-07T04:16:35.047Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 29 2020 16:33:45 GMT+0800 (GMT+08:00) --><p>*<em>前言<br>*</em><br>vue2仿telegram这个项目我把自己所学的vue大部分知识都用上了，可以说覆盖了vue和vuex的大部分知识，通过这项目对vue有了更加深刻的理解以及更灵活的应用。</p><p><strong>源码地址：</strong><br><a href="https://github.com/xxydrr/vue-telegram" target="_blank" rel="noopener">https://github.com/xxydrr/vue-telegram</a><br><strong>效果演示</strong><br><a href="https://180231.xyz/vue-telegram/#/">点击查看demo</a>（PC浏览器预览时请切换到手机预览模式同时建议刷新一下再预览）</p><p><strong>移动端扫描下方二维码</strong></p><p>二维码查看</p><p><a href="https://camo.githubusercontent.com/41c1c27e6eab16e52e64b2c7f7f6f17931e4c92e/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7878796472722f6d795f7069632f696d672f32303230303930363131303434342e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/41c1c27e6eab16e52e64b2c7f7f6f17931e4c92e/68747470733a2f2f63646e2e6a7364656c6976722e6e65742f67682f7878796472722f6d795f7069632f696d672f32303230303930363131303434342e706e67" alt="img"></a></p><p><strong>技术栈</strong></p><p>脚手架工具 <strong><a href="mailto:vue-cli@4.4.6">vue-cli@4.4.6</a></strong></p><p>主体：<strong>vue + vue-router + vuex + scss +mint ui+mui+es6</strong></p><p>其他：<strong>better-scroll + animate.css</strong></p><ol><li><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><ul><li>页面展示动画交互</li><li>信息发送</li><li>分组功能</li><li>删除联系人</li><li>搜索联系人</li><li>用户部分信息修改</li><li>badge组件响应式更新</li><li>消息免打扰</li><li>持续完善…</li></ul></li></ol><p><strong>总结</strong><br>1、telegram最新版有小小改动更新了部分setting编辑个人信息样式时间有限我就不改过来了。</p><p>2、目前已经显示文字聊天功能，后期应该会加入表情功能，特别是gif。</p><p>3、为什么加入了过于多余的mui，加入mui纯属是为了练习学会使用这种类型的ui库，因为这和bootstrap使用方式类似。</p><p>4、个人这项目可以作为这是很好使用vuex的一个例子，因为vuex的绝大部分常用知识都用到了。</p><p>5、该项目基本使用插件第三方库的来实现，对插件第三方库的使用有更深刻使用心得。</p><p>6、该项目后期有时间将会加入axios+mock或者axios+node.js后台完善该项目。敬请期待！！！</p><h3 id="部分屏幕截图"><a href="#部分屏幕截图" class="headerlink" title="部分屏幕截图"></a>部分屏幕截图</h3><p><strong>联系人界面</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20200902110515.png" alt="">)<img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20200902111035.png" alt=""></p><p><strong>对话界面</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20200905204751.png" alt="">)<img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20200902112552.png" alt=""></p><p><strong>对话面板界面</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20200902111048.png" alt="">)<img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20200902111655.png" alt=""></p><p><strong>查看以及编辑好友信息</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20200902111106.png" alt="">)<img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20200902111143.png" alt=""></p><p><strong>个人设置</strong></p><p><img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20200902110753.png" alt="">)<img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20200902113330.png" alt=""></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 29 2020 16:33:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;*&lt;em&gt;前言&lt;br&gt;*&lt;/em&gt;&lt;br&gt;vue2仿telegram这个项目我把自己所学的vue大部分知识都用上了，可以说覆盖了vue和vuex
      
    
    </summary>
    
    
      <category term="vue" scheme="http://180231.xyz/categories/vue/"/>
    
    
      <category term="vue" scheme="http://180231.xyz/tags/vue/"/>
    
      <category term="vuex" scheme="http://180231.xyz/tags/vuex/"/>
    
      <category term="telegram" scheme="http://180231.xyz/tags/telegram/"/>
    
  </entry>
  
  <entry>
    <title>消息尾部添加时间</title>
    <link href="http://180231.xyz/2020/09/07/%E6%B6%88%E6%81%AF%E5%B0%BE%E9%83%A8%E6%B7%BB%E5%8A%A0%E6%97%B6%E9%97%B4/"/>
    <id>http://180231.xyz/2020/09/07/%E6%B6%88%E6%81%AF%E5%B0%BE%E9%83%A8%E6%B7%BB%E5%8A%A0%E6%97%B6%E9%97%B4/</id>
    <published>2020-09-07T04:14:23.137Z</published>
    <updated>2020-09-07T04:18:42.489Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 29 2020 16:33:45 GMT+0800 (GMT+08:00) --><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​ 我们如何在发送消息的尾部添加事件呢？如以下这种效果</p><p><img src="https://cdn.jsdelivr.net/gh/xxydrr/my_pic/img/20200907115315.png" alt=""></p><p>可能我们首先想到消息的div加定位position: relative 右侧加个padding-right;然后在time的span加position: absolute;如果一行是完全ok的，但是多行的情况下就不行的非常丑陋。我们正确的做法应该是在消息的文本后面加个span，*&lt;<em>span class=”hide”</em>&gt;<em>0:00</em>&lt;/<em>span</em>&gt;*，然后.hide的visibility: hidden;就行了，因为visibility是实际占位的，而display是不占空间的。具体代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;li</span><br><span class="line">        v-for&#x3D;&quot;(item,index) in selectedChat.messages&quot;</span><br><span class="line">        :key&#x3D;&quot;index&quot;</span><br><span class="line">        class&#x3D;&quot;chat-detail chat-detail-left&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;chat-user&quot;&gt;&lt;img :src&#x3D;&quot;selectedChat.user.img&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;p class&#x3D;&quot;chat-text clearfix&quot;&gt;&#123;&#123;item.content&#125;&#125;</span><br><span class="line">          &lt;span class&#x3D;&quot;hide&quot;&gt;0:00&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;time&quot;&gt;&#123;&#123;item.date | formatTime&#125;&#125;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;li&gt;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">.chat-text &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        max-width: 250px;</span><br><span class="line">        position: relative;</span><br><span class="line">        bottom: 0;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">        margin-bottom: 6px;</span><br><span class="line">        color: #000;</span><br><span class="line">        background: #f1f1f4;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        line-height: 25px;</span><br><span class="line">        text-align: left;</span><br><span class="line">        word-break: break-all;</span><br><span class="line">        .hide &#123;</span><br><span class="line">          visibility: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">        .time &#123;</span><br><span class="line">          position: absolute;</span><br><span class="line">          display: inline-block;</span><br><span class="line">          font-size: 10px;</span><br><span class="line">          color: #aaaaab;</span><br><span class="line">          bottom: 2px;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 29 2020 16:33:45 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;​ 我们如
      
    
    </summary>
    
    
      <category term="vue" scheme="http://180231.xyz/categories/vue/"/>
    
    
      <category term="vue" scheme="http://180231.xyz/tags/vue/"/>
    
      <category term="vue编码规范" scheme="http://180231.xyz/tags/vue%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
      <category term="css编码规范" scheme="http://180231.xyz/tags/css%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>我的vue项目编码规范</title>
    <link href="http://180231.xyz/2020/08/24/vue%E9%A1%B9%E7%9B%AE%E5%80%BC%E5%BE%97%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/"/>
    <id>http://180231.xyz/2020/08/24/vue%E9%A1%B9%E7%9B%AE%E5%80%BC%E5%BE%97%E6%B3%A8%E6%84%8F%E7%9A%84%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/</id>
    <published>2020-08-24T09:19:52.719Z</published>
    <updated>2020-08-24T10:37:49.021Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 29 2020 16:33:45 GMT+0800 (GMT+08:00) --><h4><a href="#" class="headerlink"></a></h4><h2 id="1、组件-实例的选项顺序（同步官方）。官方链接"><a href="#1、组件-实例的选项顺序（同步官方）。官方链接" class="headerlink" title="1、组件/实例的选项顺序（同步官方）。官方链接"></a><strong>1、组件/实例的选项顺序（同步官方）。</strong><a href="https://cn.vuejs.org/v2/style-guide/#组件-实例的选项的顺序推荐" target="_blank" rel="noopener">官方链接</a></h2><p>这是我们推荐的组件选项默认顺序。它们被划分为几大类，所以你也能知道从插件里添加的新 property 应该放到哪里。</p><ol><li><h4 id="副作用-触发组件外的影响"><a href="#副作用-触发组件外的影响" class="headerlink" title="副作用 (触发组件外的影响)"></a><strong>副作用</strong> (触发组件外的影响)</h4><ul><li><h4 id="el"><a href="#el" class="headerlink" title="el"></a>el</h4></li></ul></li><li><h4 id="全局感知-要求组件以外的知识"><a href="#全局感知-要求组件以外的知识" class="headerlink" title="全局感知 (要求组件以外的知识)"></a><strong>全局感知</strong> (要求组件以外的知识)</h4><ul><li><h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4></li><li><h4 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h4></li></ul></li><li><h4 id="组件类型-更改组件的类型"><a href="#组件类型-更改组件的类型" class="headerlink" title="组件类型 (更改组件的类型)"></a><strong>组件类型</strong> (更改组件的类型)</h4><ul><li><h4 id="functional"><a href="#functional" class="headerlink" title="functional"></a>functional</h4></li></ul></li><li><h4 id="模板修改器-改变模板的编译方式"><a href="#模板修改器-改变模板的编译方式" class="headerlink" title="模板修改器 (改变模板的编译方式)"></a><strong>模板修改器</strong> (改变模板的编译方式)</h4><ul><li><h4 id="delimiters"><a href="#delimiters" class="headerlink" title="delimiters"></a>delimiters</h4></li><li><h4 id="comments"><a href="#comments" class="headerlink" title="comments"></a><strong>comments</strong></h4></li></ul></li><li><h4 id="模板依赖-模板内使用的资源"><a href="#模板依赖-模板内使用的资源" class="headerlink" title="模板依赖 (模板内使用的资源)"></a><strong>模板依赖</strong> (模板内使用的资源)</h4><ul><li><h4 id="components"><a href="#components" class="headerlink" title="components"></a>components</h4></li><li><h4 id="directives"><a href="#directives" class="headerlink" title="directives"></a>directives</h4></li><li><h4 id="filters"><a href="#filters" class="headerlink" title="filters"></a>filters</h4></li></ul></li><li><h4 id="组合-向选项里合并-property"><a href="#组合-向选项里合并-property" class="headerlink" title="组合 (向选项里合并 property)"></a><strong>组合</strong> (向选项里合并 property)</h4><ul><li><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4></li><li><h4 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h4></li></ul></li><li><h4 id="接口-组件的接口"><a href="#接口-组件的接口" class="headerlink" title="接口 (组件的接口)"></a><strong>接口</strong> (组件的接口)</h4><ul><li><h4 id="inheritAttrs"><a href="#inheritAttrs" class="headerlink" title="inheritAttrs"></a>inheritAttrs</h4></li><li><h4 id="model"><a href="#model" class="headerlink" title="model"></a>model</h4></li><li><h4 id="props-propsData"><a href="#props-propsData" class="headerlink" title="props/propsData"></a>props/propsData</h4></li></ul></li><li><h4 id="本地状态-本地的响应式-property"><a href="#本地状态-本地的响应式-property" class="headerlink" title="本地状态 (本地的响应式 property)"></a><strong>本地状态</strong> (本地的响应式 property)</h4><ul><li><h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4></li><li><h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4></li></ul></li><li><h4 id="事件-通过响应式事件触发的回调"><a href="#事件-通过响应式事件触发的回调" class="headerlink" title="事件 (通过响应式事件触发的回调)"></a><strong>事件</strong> (通过响应式事件触发的回调)</h4><ul><li><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4></li><li><h4 id="生命周期钩子-按照它们被调用的顺序"><a href="#生命周期钩子-按照它们被调用的顺序" class="headerlink" title="生命周期钩子 (按照它们被调用的顺序)"></a>生命周期钩子 (按照它们被调用的顺序)</h4><ul><li><h4 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h4></li><li><h4 id="created"><a href="#created" class="headerlink" title="created"></a>created</h4></li><li><h4 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h4></li><li><h4 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h4></li><li><h4 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h4></li><li><h4 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h4></li><li><h4 id="activated"><a href="#activated" class="headerlink" title="activated"></a>activated</h4></li><li><h4 id="deactivated"><a href="#deactivated" class="headerlink" title="deactivated"></a>deactivated</h4></li><li><h4 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h4></li><li><h4 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h4></li></ul></li></ul></li><li><h4 id="非响应式的-property-不依赖响应系统的实例-property"><a href="#非响应式的-property-不依赖响应系统的实例-property" class="headerlink" title="非响应式的 property (不依赖响应系统的实例 property)"></a><strong>非响应式的 property</strong> (不依赖响应系统的实例 property)</h4><ul><li><h4 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h4></li></ul></li><li><h4 id="渲染-组件输出的声明式描述"><a href="#渲染-组件输出的声明式描述" class="headerlink" title="渲染 (组件输出的声明式描述)"></a><strong>渲染</strong> (组件输出的声明式描述)</h4><ul><li><h4 id="template-render"><a href="#template-render" class="headerlink" title="template/render"></a>template/render</h4></li><li><h4 id="renderError"><a href="#renderError" class="headerlink" title="renderError"></a>renderError</h4></li></ul></li></ol><h4 id="因此实际开发过程中用得比较多的选项顺序如下"><a href="#因此实际开发过程中用得比较多的选项顺序如下" class="headerlink" title="因此实际开发过程中用得比较多的选项顺序如下"></a>因此实际开发过程中用得比较多的选项顺序如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &#39;demo&#39;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  directives: &#123;&#125;,</span><br><span class="line">  filters: &#123;&#125;,</span><br><span class="line">  extends: Object,</span><br><span class="line">  mixins: [],</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">  watch: &#123;&#125;,</span><br><span class="line">  beforeCreate() &#123;&#125;,</span><br><span class="line">  created() &#123;&#125;,</span><br><span class="line">  beforeMount() &#123;&#125;,</span><br><span class="line">  mounted() &#123;&#125;,</span><br><span class="line">  beforeUpdate() &#123;&#125;,</span><br><span class="line">  updated() &#123;&#125;,</span><br><span class="line">  activated() &#123;&#125;,</span><br><span class="line">  deactivated() &#123;&#125;,</span><br><span class="line">  beforeDestroy() &#123;&#125;,</span><br><span class="line">  destroyed() &#123;&#125;,</span><br><span class="line">  methods() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、元素-包括组件-的-attribute-应该有统一的顺序（同步官方）。官方"><a href="#2、元素-包括组件-的-attribute-应该有统一的顺序（同步官方）。官方" class="headerlink" title="2、元素 (包括组件) 的 attribute 应该有统一的顺序（同步官方）。官方"></a><strong>2、元素 (包括组件) 的 attribute 应该有统一的顺序（同步官方）。</strong><a href="https://cn.vuejs.org/v2/style-guide/#元素-attribute-的顺序推荐" target="_blank" rel="noopener">官方</a></h2><p>这是我们为组件选项推荐的默认顺序。它们被划分为几大类，所以你也能知道新添加的自定义 attribute 和指令应该放到哪里。</p><ol><li><h4 id="定义-提供组件的选项"><a href="#定义-提供组件的选项" class="headerlink" title="定义 (提供组件的选项)"></a><strong>定义 (提供组件的选项)</strong></h4><ul><li><h4 id="is"><a href="#is" class="headerlink" title="is"></a>is</h4></li></ul></li><li><h4 id="列表渲染-创建多个变化的相同元素"><a href="#列表渲染-创建多个变化的相同元素" class="headerlink" title="列表渲染 (创建多个变化的相同元素)"></a><strong>列表渲染 (创建多个变化的相同元素)</strong></h4><ul><li><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4></li></ul></li><li><h4 id="条件渲染-元素是否渲染-显示"><a href="#条件渲染-元素是否渲染-显示" class="headerlink" title="条件渲染 (元素是否渲染/显示)"></a><strong>条件渲染 (元素是否渲染/显示)</strong></h4><ul><li><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4></li><li><h4 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h4></li><li><h4 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h4></li><li><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4></li><li><h4 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h4></li></ul></li><li><h4 id="渲染方式-改变元素的渲染方式"><a href="#渲染方式-改变元素的渲染方式" class="headerlink" title="渲染方式 (改变元素的渲染方式)"></a><strong>渲染方式 (改变元素的渲染方式)</strong></h4><ul><li><h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4></li><li><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4></li></ul></li><li><h4 id="全局感知-需要超越组件的知识"><a href="#全局感知-需要超越组件的知识" class="headerlink" title="全局感知 (需要超越组件的知识)"></a><strong>全局感知</strong> (需要超越组件的知识)</h4><ul><li><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4></li></ul></li><li><h4 id="唯一的-attribute-需要唯一值的-attribute"><a href="#唯一的-attribute-需要唯一值的-attribute" class="headerlink" title="唯一的 attribute (需要唯一值的 attribute)"></a><strong>唯一的 attribute</strong> (需要唯一值的 attribute)</h4><ul><li><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4></li><li><h4 id="key"><a href="#key" class="headerlink" title="key"></a>key</h4></li></ul></li><li><h4 id="双向绑定-把绑定和事件结合起来"><a href="#双向绑定-把绑定和事件结合起来" class="headerlink" title="双向绑定 (把绑定和事件结合起来)"></a><strong>双向绑定</strong> (把绑定和事件结合起来)</h4><ul><li><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4></li></ul></li><li><h4 id="其它-attribute-所有普通的绑定或未绑定的-attribute"><a href="#其它-attribute-所有普通的绑定或未绑定的-attribute" class="headerlink" title="其它 attribute (所有普通的绑定或未绑定的 attribute)"></a><strong>其它 attribute</strong> (所有普通的绑定或未绑定的 attribute)</h4></li><li><h4 id="事件-组件事件监听器"><a href="#事件-组件事件监听器" class="headerlink" title="事件 (组件事件监听器)"></a><strong>事件</strong> (组件事件监听器)</h4><ul><li><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4></li></ul></li><li><h4 id="内容-覆写元素的内容"><a href="#内容-覆写元素的内容" class="headerlink" title="内容 (覆写元素的内容)"></a><strong>内容</strong> (覆写元素的内容)</h4><ul><li><h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4></li><li><h4 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h4></li></ul></li></ol><h4 id="因此实际开发过程中用得比较多的元素特征顺序如下"><a href="#因此实际开发过程中用得比较多的元素特征顺序如下" class="headerlink" title="因此实际开发过程中用得比较多的元素特征顺序如下"></a>因此实际开发过程中用得比较多的元素特征顺序如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">- v-for</span><br><span class="line">- v-if&#x2F;v-show</span><br><span class="line">- id</span><br><span class="line">- ref&#x2F;key&#x2F;slot</span><br><span class="line">- v-model</span><br><span class="line">- class&#x2F;:class&#x2F;style&#x2F;:style</span><br><span class="line">- v-on</span><br><span class="line"></span><br><span class="line">&lt;div(组件同理)</span><br><span class="line">  v-for&#x3D;&quot;(item, index) in items&quot;</span><br><span class="line">  :key&#x3D;&quot;index&quot;</span><br><span class="line">  v-if&#x3D;&quot;condition&quot;</span><br><span class="line">  id&#x3D;&quot;&quot;</span><br><span class="line">  ref&#x3D;&quot;&quot;</span><br><span class="line">  key&#x3D;&quot;&quot;</span><br><span class="line">  slot&#x3D;&quot;&quot;</span><br><span class="line">  v-model&#x3D;&quot;something&quot;</span><br><span class="line">  class&#x3D;&quot;&quot;</span><br><span class="line">  :class&#x3D;&quot;&quot;</span><br><span class="line">  style&#x3D;&quot;&quot;</span><br><span class="line">  :style&#x3D;&quot;&quot;</span><br><span class="line">  v-on:event&#x3D;&quot;handle&quot;</span><br><span class="line">&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><h2 id="3、css样式书写规范（参照官网以及某大公司的规范）"><a href="#3、css样式书写规范（参照官网以及某大公司的规范）" class="headerlink" title="3、css样式书写规范（参照官网以及某大公司的规范）"></a>3、css样式书写规范（参照官网以及某大公司的规范）</h2><h3 id="1、首先我们为CSS类命名时应使用lowercase-hyphenated"><a href="#1、首先我们为CSS类命名时应使用lowercase-hyphenated" class="headerlink" title="1、首先我们为CSS类命名时应使用lowercase-hyphenated"></a>1、首先我们为CSS类命名时应使用<code>lowercase-hyphenated</code></h3><h3 id="2、-建议-border-margin-padding等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。"><a href="#2、-建议-border-margin-padding等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。" class="headerlink" title="2、[建议] border / margin/ padding等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。"></a>2、[建议] border / margin/ padding等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。</h3><h4 id="3、属性书写顺序"><a href="#3、属性书写顺序" class="headerlink" title="3、属性书写顺序"></a>3、属性书写顺序</h4><h3 id="建议-同一-rule-set-下的属性在书写时，应按功能进行分组，并以-Formatting-Model（布局方式、位置）-gt-Box-Model（尺寸）-gt-Typographic（文本相关）-gt-Visual（视觉效果）-的顺序书写，以提高代码的可读性。"><a href="#建议-同一-rule-set-下的属性在书写时，应按功能进行分组，并以-Formatting-Model（布局方式、位置）-gt-Box-Model（尺寸）-gt-Typographic（文本相关）-gt-Visual（视觉效果）-的顺序书写，以提高代码的可读性。" class="headerlink" title="[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果） 的顺序书写，以提高代码的可读性。"></a>[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 <strong>Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果）</strong> 的顺序书写，以提高代码的可读性。</h3><p>解释：</p><ul><li>Formatting Model 相关属性包括：<code>position</code> / <code>top</code> / <code>right</code> / <code>bottom</code> / <code>left</code> / <code>float</code> / <code>display</code> / <code>overflow</code> 等</li><li>Box Model 相关属性包括：<code>border</code> / <code>margin</code> / <code>padding</code> / <code>width</code> / <code>height</code> 等</li><li>Typographic 相关属性包括：<code>font</code> / <code>line-height</code> / <code>text-align</code> / <code>word-wrap</code> 等</li><li>Visual 相关属性包括：<code>background</code> / <code>color</code> / <code>transition</code> / <code>list-style</code> 等</li></ul><p>另外，如果包含 <code>content</code> 属性，应放在最前面。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.sidebar &#123;</span><br><span class="line">    &#x2F;* formatting model: positioning schemes &#x2F; offsets &#x2F; z-indexes &#x2F; display &#x2F; ...  *&#x2F;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50px;</span><br><span class="line">    left: 0;</span><br><span class="line">    overflow-x: hidden;</span><br><span class="line"></span><br><span class="line">    &#x2F;* box model: sizes &#x2F; margins &#x2F; paddings &#x2F; borders &#x2F; ...  *&#x2F;</span><br><span class="line">    width: 200px;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    border: 1px solid #ddd;</span><br><span class="line"></span><br><span class="line">    &#x2F;* typographic: font &#x2F; aligns &#x2F; text styles &#x2F; ... *&#x2F;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    line-height: 20px;</span><br><span class="line"></span><br><span class="line">    &#x2F;* visual: colors &#x2F; shadows &#x2F; gradients &#x2F; ... *&#x2F;</span><br><span class="line">    background: #f5f5f5;</span><br><span class="line">    color: #333;</span><br><span class="line">    -webkit-transition: color 1s;</span><br><span class="line">       -moz-transition: color 1s;</span><br><span class="line">            transition: color 1s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-、清除浮动"><a href="#4-、清除浮动" class="headerlink" title="4 、清除浮动"></a>4 、清除浮动</h4><h5 id="建议-当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置-clear-或触发-BFC-的方式进行-clearfix。尽量不使用增加空标签的方式。"><a href="#建议-当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置-clear-或触发-BFC-的方式进行-clearfix。尽量不使用增加空标签的方式。" class="headerlink" title="[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 clear 或触发 BFC 的方式进行 clearfix。尽量不使用增加空标签的方式。"></a><strong>[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 <code>clear</code> 或触发 <code>BFC</code> 的方式进行 <code>clearfix</code>。尽量不使用增加空标签的方式。</strong></h5><h4 id="5、-important"><a href="#5、-important" class="headerlink" title="5、 !important"></a>5、 !important</h4><p><strong>[建议]</strong> 尽量不使用 <code>!important</code> 声明。</p><p><strong>[建议]</strong> 当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和 <code>!important</code> 定义样式。</p><h4 id="6、数值"><a href="#6、数值" class="headerlink" title="6、数值"></a>6、数值</h4><p><strong>[强制]</strong> 当数值为 0 - 1 之间的小数时，省略整数部分的 <code>0</code>。</p><h4 id="7、长度"><a href="#7、长度" class="headerlink" title="7、长度"></a>7、长度</h4><p><strong>[强制]</strong> 长度为 <code>0</code> 时须省略单位。 (也只有长度单位可省)</p><h4 id="8-、颜色"><a href="#8-、颜色" class="headerlink" title="8 、颜色"></a>8 、颜色</h4><p><strong>[强制]</strong> RGB颜色值必须使用十六进制记号形式 <code>#rrggbb</code>。不允许使用 <code>rgb()</code>。</p><p><strong>[强制]</strong> 颜色值可以缩写时，必须使用缩写形式。</p><p><strong>[强制]</strong> 颜色值不允许使用命名色值。</p><p><strong>[建议]</strong> 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* good *&#x2F;</span><br><span class="line">.success &#123;</span><br><span class="line">    background-color: #aca;</span><br><span class="line">    color: #90ee90;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* good *&#x2F;</span><br><span class="line">.success &#123;</span><br><span class="line">    background-color: #ACA;</span><br><span class="line">    color: #90EE90;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* bad *&#x2F;</span><br><span class="line">.success &#123;</span><br><span class="line">    background-color: #ACA;</span><br><span class="line">    color: #90ee90;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9、字体"><a href="#9、字体" class="headerlink" title="9、字体"></a>9、字体</h4><p><strong>[强制]</strong> 需要在 Windows 平台显示的中文内容，其字号应不小于 <code>12px</code>。</p><p>解释：</p><p>由于 Windows 的字体渲染机制，小于 <code>12px</code> 的文字显示效果极差、难以辨认。</p><p><strong>[强制]</strong> <code>font-weight</code> 属性必须使用数值方式描述。</p><p>解释：</p><p>CSS 的字重分 100 – 900 共九档，但目前受字体本身质量和浏览器的限制，实际上支持 <code>400</code> 和 <code>700</code> 两档，分别等价于关键词 <code>normal</code> 和 <code>bold</code>。</p><p>浏览器本身使用一系列<a href="http://www.w3.org/TR/CSS21/fonts.html#propdef-font-weight" target="_blank" rel="noopener">启发式规则</a>来进行匹配，在 <code>&lt;700</code> 时一般匹配字体的 Regular 字重，<code>&gt;=700</code> 时匹配 Bold 字重。</p><p>但已有浏览器开始支持 <code>=600</code> 时匹配 Semibold 字重 (见<a href="http://justineo.github.io/slideshows/font/#/3/15" target="_blank" rel="noopener">此表</a>)，故使用数值描述增加了灵活性，也更简短。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* good *&#x2F;</span><br><span class="line">h1 &#123;</span><br><span class="line">    font-weight: 700;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* bad *&#x2F;</span><br><span class="line">h1 &#123;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>[建议]</strong> <code>line-height</code> 在定义文本段落时，应使用数值。</p><p>解释：</p><p>将 <code>line-height</code> 设置为数值，浏览器会基于当前元素设置的 <code>font-size</code> 进行再次计算。在不同字号的文本段落组合中，能达到较为舒适的行间间隔效果，避免在每个设置了 <code>font-size</code> 都需要设置 <code>line-height</code>。</p><p>当 <code>line-height</code> 用于控制垂直居中时，还是应该设置成与容器高度一致。</p><h4 id="10、变换与动画"><a href="#10、变换与动画" class="headerlink" title="10、变换与动画"></a>10、变换与动画</h4><p><strong>[强制]</strong> 使用 <code>transition</code> 时应指定 <code>transition-property</code>。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* good *&#x2F;</span><br><span class="line">.box &#123;</span><br><span class="line">    transition: color 1s, border-color 1s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* bad *&#x2F;</span><br><span class="line">.box &#123;</span><br><span class="line">    transition: all 1s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="至于其他的缩进规则以及js书写规范及美化我们交给交给格式化文档工具vetur插件以及eslint解决就行了"><a href="#至于其他的缩进规则以及js书写规范及美化我们交给交给格式化文档工具vetur插件以及eslint解决就行了" class="headerlink" title="至于其他的缩进规则以及js书写规范及美化我们交给交给格式化文档工具vetur插件以及eslint解决就行了"></a>至于其他的缩进规则以及js书写规范及美化我们交给交给格式化文档工具vetur插件以及eslint解决就行了</h4><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 29 2020 16:33:45 GMT+0800 (GMT+08:00) --&gt;&lt;h4&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;h2 id=&quot;1、组件-实例的选项顺序（同步官方）。官方链接
      
    
    </summary>
    
    
      <category term="vue" scheme="http://180231.xyz/categories/vue/"/>
    
    
      <category term="vue" scheme="http://180231.xyz/tags/vue/"/>
    
      <category term="vue编码规范" scheme="http://180231.xyz/tags/vue%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
      <category term="css编码规范" scheme="http://180231.xyz/tags/css%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>js类与继承和对象关联设计模式解读</title>
    <link href="http://180231.xyz/2020/06/30/js%E7%B1%BB%E4%B8%8E%E7%BB%A7%E6%89%BF%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%85%B3%E8%81%94%E9%A3%8E%E6%A0%BC%E8%A7%A3%E8%AF%BB/"/>
    <id>http://180231.xyz/2020/06/30/js%E7%B1%BB%E4%B8%8E%E7%BB%A7%E6%89%BF%E5%92%8C%E5%AF%B9%E8%B1%A1%E5%85%B3%E8%81%94%E9%A3%8E%E6%A0%BC%E8%A7%A3%E8%AF%BB/</id>
    <published>2020-06-30T10:24:00.000Z</published>
    <updated>2020-07-01T01:30:42.430Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 29 2020 16:33:45 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>读完了《你不知的js上卷》后，使用了类与继承与，对象关联风格与行为委托实现一个简单的个人任务管理系统。通过实战后对这两种设计模式有了更加深刻的了解。</p><h3 id="代码部分对比"><a href="#代码部分对比" class="headerlink" title="代码部分对比"></a>代码部分对比</h3><h4 id="类与继承设计模式"><a href="#类与继承设计模式" class="headerlink" title="类与继承设计模式"></a>类与继承设计模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;bulletBox.js</span><br><span class="line">(function(_) &#123;</span><br><span class="line">    var template &#x3D; </span><br><span class="line">    &#96;&lt;div class&#x3D;&quot;overlay&quot;&gt;</span><br><span class="line">         &lt;div class&#x3D;&quot;box&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;box-title&quot;&gt;</span><br><span class="line">                &lt;h3&gt;消息提醒&lt;&#x2F;h3&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;box-close icon-cross1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;box-main&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;new-title&quot;&gt;</span><br><span class="line">                    &lt;h3 class&#x3D;&quot;nameValue&quot;&gt;名称：&lt;&#x2F;h3&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;button class&#x3D;&quot;btn2 confirm&quot;&gt;确定&lt;&#x2F;button&gt;</span><br><span class="line">                &lt;button class&#x3D;&quot;btn2 cancel&quot;&gt;取消&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt; </span><br><span class="line">    &lt;&#x2F;div&gt;&#96;;</span><br><span class="line">     </span><br><span class="line">    function Modal(options) &#123;</span><br><span class="line">        this.options &#x3D; options || &#123;&#125;; </span><br><span class="line">        this.container &#x3D; this.layout.cloneNode(true);</span><br><span class="line">        </span><br><span class="line">        this.body &#x3D; this.container.querySelector(&#39;.new-title&#39;);</span><br><span class="line">        this.bodyContent &#x3D; this.container.querySelector(&#39;.new-title h3&#39;);</span><br><span class="line">        this.input &#x3D; this.body.querySelector(&#39;input&#39;);</span><br><span class="line">        &#x2F;&#x2F; 将options复制到组件实例上</span><br><span class="line">        _.mixin(this,options);</span><br><span class="line">        this._renderUI();</span><br><span class="line">        this._initEvent();</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;这里使用显示混入的方式，也可以使用原型对象关联的方式 Modal.prototype &#x3D; Object.create(&#123;&#125;)</span><br><span class="line">    _.mixin(Modal.prototype, &#123;</span><br><span class="line">        layout: _.htmlTranslate(template),</span><br><span class="line">        &#x2F;&#x2F; 添加节点</span><br><span class="line">        appendTo: function(node) &#123;</span><br><span class="line">            node.appendChild(this.container);</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 显示弹窗</span><br><span class="line">        show: function(content) &#123;</span><br><span class="line">            this.container.style.display &#x3D; &#39;block&#39;;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 隐藏弹窗</span><br><span class="line">        hide: function() &#123;</span><br><span class="line">            this.container.style.display &#x3D; &#39;none&#39;;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 销毁弹窗</span><br><span class="line">        destroy: function() &#123;</span><br><span class="line">            this.container.parentNode.removeChild(this.container);</span><br><span class="line">        &#125;,</span><br><span class="line">      </span><br><span class="line">        _renderUI: function() &#123;</span><br><span class="line">            if(this.hasFlag &#x3D;&#x3D;&#x3D; true) &#123;</span><br><span class="line">                &#x2F;&#x2F; this.body.removeChild(&#39;hasInput&#39;)</span><br><span class="line">                this.input.parentNode.removeChild(this.input);</span><br><span class="line">                this.text &amp;&amp; (this.bodyContent.innerText &#x3D; this.text);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        _initEvent: function() &#123;</span><br><span class="line">            _.addEvent(this.container.querySelector(&#39;.confirm&#39;), &#39;click&#39;, this.onConfirm.bind(this));</span><br><span class="line">            _.addEvent(this.container.querySelector(&#39;.cancel&#39;), &#39;click&#39;, this.onCancel.bind(this));</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        onConfirm: function() &#123;</span><br><span class="line">            this.emit(&#39;confirm&#39;);</span><br><span class="line">            this.destroy();</span><br><span class="line">        &#125;,</span><br><span class="line">        onCancel: function() &#123;</span><br><span class="line">            this.emit(&#39;cancel&#39;);</span><br><span class="line">            this.destroy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">     &#x2F;&#x2F; 使用混入Mixin的方式使得Modal具有事件发射器功能</span><br><span class="line">     _.mixin(Modal.prototype, _.emitter);</span><br><span class="line">    &#x2F;&#x2F;  暴露到全局</span><br><span class="line">    window.Modal &#x3D; Modal;</span><br><span class="line">&#125;)(util)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;main.js</span><br><span class="line"> new Modal()</span><br><span class="line">        .on(&#39;confirm&#39;, function() &#123;</span><br><span class="line">                if(this.input.value.trim() !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">                    var index &#x3D; &#39;&#39;;</span><br><span class="line">                    if(selectCG.className.indexOf(&#39;sub-category&#39;) !&#x3D; -1) &#123;</span><br><span class="line">                        index &#x3D; &#39;&#39; + (data.category.push(&#123;name: this.input.value, number: 0, todos: [], subCategory: []&#125;) - 1);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        index &#x3D; selectCG.index + &#39;-&#39; + (data.category[selectCG.index].subCategory.push(&#123;name: this.input.value, number: 0, todos:[]&#125;) - 1);  </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; 更新分类列表</span><br><span class="line">                updateCGList(data.category, index);</span><br><span class="line">                _.save(data);</span><br><span class="line">            &#125;)</span><br><span class="line">         .appendTo(document.body);</span><br></pre></td></tr></table></figure><p>主要在构造函数function Modal(options) 声明属性赋值以及初始化工作，通过混入在Modal.prototype定义方法，然后调用new Modal时侯一次实现构造和初始化工作。然后通过<strong>链式调用需要的方法</strong>。</p><h4 id="对象关联风格与行为委托设计模式"><a href="#对象关联风格与行为委托设计模式" class="headerlink" title="对象关联风格与行为委托设计模式"></a>对象关联风格与行为委托设计模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">(function(_) &#123;</span><br><span class="line">    var template &#x3D; </span><br><span class="line">    &#96;&lt;div class&#x3D;&quot;overlay&quot;&gt;</span><br><span class="line">         &lt;div class&#x3D;&quot;box&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;box-title&quot;&gt;</span><br><span class="line">                &lt;h3&gt;消息提醒&lt;&#x2F;h3&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;box-close icon-cross1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;box-main&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;new-title&quot;&gt;</span><br><span class="line">                    &lt;h3 class&#x3D;&quot;nameValue&quot;&gt;名称：&lt;&#x2F;h3&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;button class&#x3D;&quot;btn2 confirm&quot;&gt;确定&lt;&#x2F;button&gt;</span><br><span class="line">                &lt;button class&#x3D;&quot;btn2 cancel&quot;&gt;取消&lt;&#x2F;button&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt; </span><br><span class="line">    &lt;&#x2F;div&gt;&#96;;</span><br><span class="line">     </span><br><span class="line">    var Modal &#x3D; &#123;</span><br><span class="line">        init: function(options) &#123;</span><br><span class="line">            this.options &#x3D; options || &#123;&#125;; </span><br><span class="line">            this.container &#x3D; this.layout.cloneNode(true);</span><br><span class="line">            </span><br><span class="line">            this.body &#x3D; this.container.querySelector(&#39;.new-title&#39;);</span><br><span class="line">            this.bodyContent &#x3D; this.container.querySelector(&#39;.new-title h3&#39;);</span><br><span class="line">            this.input &#x3D; this.body.querySelector(&#39;input&#39;);</span><br><span class="line">            修改原型链使Modal对象的原型链上有_.emitter的方法</span><br><span class="line">            Object.setPrototypeOf(Modal,_.emitter);</span><br><span class="line">            this._renderUI();</span><br><span class="line">            this._initEvent();</span><br><span class="line">           </span><br><span class="line">        &#125;,</span><br><span class="line">        layout: _.htmlTranslate(template),</span><br><span class="line">        &#x2F;&#x2F; 添加节点</span><br><span class="line">        appendTo: function(node) &#123;</span><br><span class="line">            node.appendChild(this.container);</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 显示弹窗</span><br><span class="line">        show(content) &#123;</span><br><span class="line">            this.container.style.display &#x3D; &#39;block&#39;;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 隐藏弹窗</span><br><span class="line">        hide() &#123;</span><br><span class="line">            this.container.style.display &#x3D; &#39;none&#39;;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 销毁弹窗</span><br><span class="line">        destroy() &#123;</span><br><span class="line">            this.container.parentNode.removeChild(this.container);</span><br><span class="line">        &#125;,</span><br><span class="line">       </span><br><span class="line">        _renderUI: function() &#123;</span><br><span class="line">            if(this.options.hasFlag &#x3D;&#x3D;&#x3D; true) &#123;</span><br><span class="line">                &#x2F;&#x2F; this.body.removeChild(&#39;hasInput&#39;)</span><br><span class="line">                this.input.parentNode.removeChild(this.input);</span><br><span class="line">                this.options.text &amp;&amp; (this.bodyContent.innerText &#x3D; this.options.text);</span><br><span class="line">            &#125; </span><br><span class="line">          &#125;,</span><br><span class="line">        _initEvent: function() &#123;</span><br><span class="line">            _.addEvent(this.container.querySelector(&#39;.confirm&#39;), &#39;click&#39;, this.onConfirm.bind(this));</span><br><span class="line">            _.addEvent(this.container.querySelector(&#39;.cancel&#39;), &#39;click&#39;, this.onCancel.bind(this));</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        onConfirm() &#123;</span><br><span class="line">            this.emit(&#39;confirm&#39;);</span><br><span class="line">            this.destroy();</span><br><span class="line">        &#125;,</span><br><span class="line">        onCancel() &#123;</span><br><span class="line">            this.emit(&#39;cancel&#39;);</span><br><span class="line">            this.destroy();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;  暴露到全局</span><br><span class="line">    window.Modal &#x3D; Modal;</span><br><span class="line">&#125;)(util)</span><br></pre></td></tr></table></figure><p>对象关联这种风格只需要在组件上定义一个对象，不在需要prototype定义方法属性了。也不需要显示混入的复制方式，而是使用es6的新方法 Object.setPrototypeOf()修改[[prototype]]链达到同样的目的。但是在调用的时候实现构造实例化初始化的时候需要分两步（关联对象和初始化），而且它不能通过类与继承的方式.().().()这样直接链式调用方法，不过这样对初学者来说可以增加代码的可读性，也更好实现关注分离原则。如果还是不理解他们之间的区别，可以看看我的这个<a href="https://github.com/xxydrr/bigPractice" target="_blank" rel="noopener">项目</a>再回头看你不知道的js上的第二部分的后面几章节你就会深有体会了</p><h3 id="个人看法"><a href="#个人看法" class="headerlink" title="个人看法"></a>个人看法</h3><p>之前第一次看你不知的js的时候作者对对象关联与行为委托的设计模式不断的赞赏，而不断对js的类与继承的模式进行吐槽。这可能作者觉得js应该使用自己的独有的语言风格而不是极力地模仿类的方式。个人觉得js有意让这两种模式都能平衡地发展，因为es6为了两种模式都添加了新的语法，如class， Object.setPrototypeOf()方法等。所以，我觉得两种模式看个人选择，没有好坏之分，重点是实现功能完成项目。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 29 2020 16:33:45 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;读完了《你
      
    
    </summary>
    
    
      <category term="js设计模式" scheme="http://180231.xyz/categories/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="面向对象" scheme="http://180231.xyz/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="设计模式" scheme="http://180231.xyz/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="类与继承" scheme="http://180231.xyz/tags/%E7%B1%BB%E4%B8%8E%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://180231.xyz/2020/06/15/hello-world/"/>
    <id>http://180231.xyz/2020/06/15/hello-world/</id>
    <published>2020-06-15T01:44:54.519Z</published>
    <updated>2020-06-15T02:18:51.708Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 29 2020 16:33:44 GMT+0800 (GMT+08:00) --><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 29 2020 16:33:44 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hex
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020年最新Github+Hexo+Cloudflare+域名搭建博客详解教程</title>
    <link href="http://180231.xyz/2020/06/14/2020%E5%B9%B4%E6%9C%80%E6%96%B0Github+Hexo+%E5%9F%9F%E5%90%8D%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AF%A6%E8%A7%A3%E6%95%99%E7%A8%8B/"/>
    <id>http://180231.xyz/2020/06/14/2020%E5%B9%B4%E6%9C%80%E6%96%B0Github+Hexo+%E5%9F%9F%E5%90%8D%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AF%A6%E8%A7%A3%E6%95%99%E7%A8%8B/</id>
    <published>2020-06-14T10:24:00.000Z</published>
    <updated>2020-07-01T01:35:48.833Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Oct 29 2020 16:33:45 GMT+0800 (GMT+08:00) --><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​ 本博客构建于2020年6月13日，看了网上的好几个教程发现都是要不关键步骤不够详细要不软件更新迭代过快自己的部分步骤与博主不相符下面让我详细介绍我的搭建之路。熟悉nmp操作的会很快上手，直接跳过node的安装</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><h3 id="通过-NVM-安装Node-js（注意需安装Node-js-10-0-及以上版本）"><a href="#通过-NVM-安装Node-js（注意需安装Node-js-10-0-及以上版本）" class="headerlink" title="通过 NVM 安装Node.js（注意需安装Node.js 10.0 及以上版本）"></a>通过 NVM 安装Node.js（注意需安装Node.js 10.0 及以上版本）</h3><p><strong>NVM</strong>：node.js version manager，用来管理 node 的版本。安装的步骤如下。</p><p>（1）我们去<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">官网</a>下载 NVM 的安装包：</p><p><img src="http://ww1.sinaimg.cn/large/007R9vVkgy1gfqtfmmj4vj30vo0nttan.jpg" alt=""></p><p>下载下来后，直接解压到 <code>F:\dev</code>目录下：</p><p><img src="http://ww1.sinaimg.cn/large/007R9vVkgy1gfqtlgs7gbj30kl05rmxj.jpg" alt=""></p><p>（2）在上面的目录中，点击install.cmd自动生成<code>settings.txt</code>文件，里面的内容填充如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root: F:\dev\nvm</span><br><span class="line">path: F:\dev\nodejs</span><br><span class="line">arch: 64</span><br><span class="line">proxy</span><br></pre></td></tr></table></figure><p>上方内容的解释：</p><ul><li><p>root 配置为：当前 nvm.exe 所在的目录</p></li><li><p>path 配置为：node 快捷方式所在的目录</p></li><li><p>arch 配置为：当前操作系统的位数（32/64）</p></li><li><p>proxy 不用配置</p></li></ul><p>（3）配置环境变量：</p><ul><li><p><code>NVM_HOME</code> = <code>D:\web\nvm</code>（当前 nvm.exe 所在目录）</p></li><li><p><code>NVM_SYMLINK</code> = <code>D:\web\nodejs</code> （node 快捷方式所在的目录）</p></li><li><p>PATH += <code>;%NVM_HOME%;%NVM_SYMLINK%</code></p><p><img src="http://ww1.sinaimg.cn/large/007R9vVkgy1gfqtp34gyxj30gg07ejrh.jpg" alt=""></p><p><img src="http://ww1.sinaimg.cn/large/007R9vVkgy1gfqtqbn47aj30el0ermxl.jpg" alt=""></p></li></ul><p>配置成功后，重启资源管理器。</p><p><strong>验证：</strong>(在 cmd 中输入命令)</p><p>（1）输入<code>nvm</code>命令查看环境变量是否配置成功：</p><p><img src="http://ww1.sinaimg.cn/large/007R9vVkgy1gfqtrobmuxj30qo0dct90.jpg" alt="">由于nvm默认的下载地址<a href="http://nodejs.org/dist/是外国外服务器，国内很慢可以使用淘宝的镜像。找到刚刚解压的nvm文件夹下的settings.txt文件在其后加入这两句话，并保存" target="_blank" rel="noopener">http://nodejs.org/dist/是外国外服务器，国内很慢可以使用淘宝的镜像。找到刚刚解压的nvm文件夹下的settings.txt文件在其后加入这两句话，并保存</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;</span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure><p>（2）然后可以开始下载对应的node版本，推荐下载一个稳定版本和一个最新的版本下载最新版本直接执行指令nvm install latest就行了，稳定版本自己去官网找然后按nvm install 后面加版本号，例如nvm install 12.18.0 就能下载对应的node版本</p><p>（3）输入 <code>nvm ls</code>，查看已安装的所有 node 版本。</p><p>（4）输入 <code>nvm -v</code>，查看 已安装的 nvm 版本。</p><p>（5）输入 <code>node -v</code>，查看正在使用的 node 版本。</p><p>（6）输入nvm use 版本号即可切换对应的版本。 如输入命令nvm use 12.18.0后按nvm ls后node的版本前带有*号即代表当前使用的node版本</p><p><strong>（7）由于npm的下载地址为<a href="https://registry.npmjs.org/是国外服务器，国内很慢可以使用淘宝的镜像执行下面的命令即可" target="_blank" rel="noopener">https://registry.npmjs.org/是国外服务器，国内很慢可以使用淘宝的镜像执行下面的命令即可</a></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 配置地址</span><br><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">&#x2F;&#x2F; 安装</span><br><span class="line">npm install</span><br><span class="line">&#x2F;&#x2F;设置为原来的地址</span><br><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F;</span><br></pre></td></tr></table></figure><ul><li><strong>参考链接</strong>：<a href="https://segmentfault.com/a/1190000011114680" target="_blank" rel="noopener">安装npm，nvm，node</a></li></ul><p>如果 node 安装失败，可以参考上面这个链接再不行自己上网找。</p><h3 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h3><p><a href="https://github.com/" target="_blank" rel="noopener">github</a></p><p>点击GitHub中的New repository创建新仓库。仓库名为：<strong>你的用户名**</strong>.<a href="https://link.zhihu.com/?target=http%3A//github.io">http://github.io</a> 这是固定写法为了后面操作更简单，如我的</p><p><img src="http://ww1.sinaimg.cn/large/007R9vVkgy1gfqvl3ssb4j30qx0jogms.jpg" alt=""></p><p>因为我已经有了这个名字的仓库所以才有这个警告，直接创建仓库</p><h3 id="安装git（期间Git-Bash-Here窗口会弹窗要求你输入GitHub的账号密码输入即可）"><a href="#安装git（期间Git-Bash-Here窗口会弹窗要求你输入GitHub的账号密码输入即可）" class="headerlink" title="安装git（期间Git Bash Here窗口会弹窗要求你输入GitHub的账号密码输入即可）"></a>安装git（期间Git Bash Here窗口会弹窗要求你输入GitHub的账号密码输入即可）</h3><p><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>真的是傻瓜式安装直接下一步下一步到了添加路径三选一选择的时候选择第二个Use Git from the Windows Command Prompt就行了直接自动帮你配置环境这些操作。在命令行输入git查看是否安装成功或者右击鼠标有以下显示</p><p><img src="http://ww1.sinaimg.cn/large/007R9vVkgy1gfqurus3lzj30870bk0tj.jpg" alt=""></p><p>点击Git Bash Here一一输入以下指令（git的终端的复制快捷键是ctrl+ins，粘贴的快捷键是shift+ins，停止终端命令都和别的终端命令一样是ctrl+c）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br><span class="line">&#x2F;&#x2F;生成ssh密钥文件：</span><br><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>然后会在你的C盘的用户下的.ssh会有这个文件，如</p><p><img src="http://ww1.sinaimg.cn/large/007R9vVkgy1gfqvwfwndbj30s00e974w.jpg" alt=""></p><p>可能那个known_hosts文件没有生成，不过不用管他，之后在Git Bash中执行某条指令是提示你缺少这个文件是否安装继续你就按yes就行，他自动帮你安装补全</p><p>然后用word或者记事本之类的软件打开上面的红色框文件，然后ctrl+A全部复制，回到你的GitHub，点击右上角的GitHub后按setting，然后按左边栏的SSH and GPG keys，然后点击绿色按钮New SSH key，出现以下文本框</p><p><img src="http://ww1.sinaimg.cn/large/007R9vVkgy1gfqw0v72k7j31630me3zx.jpg" alt=""></p><p>这里的第一行title随便你填，把刚才的id_rsa.pub文本内容复制到key文本框，直接按绿色的按钮Add SSH key</p><p>在Git Bash中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/007R9vVkgy1gfqwfig8hbj30fj07laam.jpg" alt=""></p><p>提示这个直接按yes之后提示你xx用户，你已经成功认证</p><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>这时我们在电脑里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中，然后在当前blog文件夹打开cmd，即进入blog文件夹可以按ctrl+L在任务栏输入cmd或者直接打开cmd后把blog文件夹拖拽到cmd窗口</p><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。<strong>（使用npm安装插件有时会出现黄色的WARN直接无视它不是ERRO就没事,下同）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="进阶安装和使用（推荐）"><a href="#进阶安装和使用（推荐）" class="headerlink" title="进阶安装和使用（推荐）"></a>进阶安装和使用（推荐）</h3><p>对于熟悉 npm 的进阶用户，可以仅局部安装 <code>hexo</code> 包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;推荐局部安装</span><br><span class="line">npm install hexo</span><br></pre></td></tr></table></figure><p>安装完成后继续输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><p>然后一一输入以下指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new firstBolg</span><br><span class="line">&#x2F;&#x2F;生成静态网页</span><br><span class="line">hexo g</span><br><span class="line">&#x2F;&#x2F;打开本地服务器</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>然后浏览器打开<a href="http://localhost:4000/，这是我们就可以看到自己初步形成的静态网站博客了，时不时有了大功告成的感觉了" target="_blank" rel="noopener">http://localhost:4000/，这是我们就可以看到自己初步形成的静态网站博客了，时不时有了大功告成的感觉了</a></p><h3 id="Hexo与GitHub关联"><a href="#Hexo与GitHub关联" class="headerlink" title="Hexo与GitHub关联"></a>Hexo与GitHub关联</h3><p>这一步我们实现将自己的网页部署到网上，网址是GitHub提供给我们的xxxx.github.io访问</p><p>打开站点的配置文件_config.yml（即blog文件夹下的_config.yml），翻到最后修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: 你的仓库地址(如我的是https:&#x2F;&#x2F;github.com&#x2F;xxydrr&#x2F;xxydrr.github.io)</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：deploy前面不要留空格，下面的三行话前面有两个空格。.yml的文件格式非常严格</p><p>然后在blog文件夹下打开cmd（blog文件夹下按ctrl+L在地址栏输入cmd按Enter即可），安装一个插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p><p>然后打开<code>blog\source\_posts</code>的目录，可以发现下面多了一个<code>.md</code>文件，就是你的文章文件。</p><p>编写完markdown文件后，blog目录下右键打开git bash</p><p>依次输入以下三条命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即xxxx.github.io,你就会发现你的博客已经上线了，可以在网络上被访问了。</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>我们要自己的个性化域名，这就需要绑定我们自己的域名。这里演示腾讯云的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。还没有购买域名的小伙伴可能要等几天才能进行域名绑定操作，因为域名注册后还要实名给注册局注册才能用。不过你可以先跳到配置hexo和主题选择部分继续操作</p><p>登录到腾讯云，进入管理控制台的域名列表，找到你的个性化域名，点击解析进入解释，参考我的</p><p><img src="http://ww1.sinaimg.cn/large/007R9vVkgy1gfr1oxu9unj313b0n4wg4.jpg" alt=""></p><p>简单介绍以下记录值192.30.252.153和192.30.252.154是GitHub的服务器地址，最后的主机类型www记录类型A记录值是你的github域名</p><p>打开你的github博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存：</p><p><img src="http://ww1.sinaimg.cn/large/007R9vVkgy1gfr51rxedlj30v70bugm8.jpg" alt=""></p><p>然后进入blog/source目录下，创建一个记事本文件，输入你的域名。</p><p><img src="http://ww1.sinaimg.cn/large/007R9vVkgy1gfr54y7089j308y041745.jpg" alt=""></p><p>保存，命名为CNAME ，<strong>注意保存成所有文件即文件没有后缀</strong></p><p>然后在blog目录下右键打开git bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这时候打开浏览器输入你的域名将会直接进入你自己搭建的网站。</p><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h3><p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes</a> 我自己使用的是pure。</p><p>配置主题是非常复杂的事情，各个主题的源码不同配置方式也不同。因为首先你想要找到你自己喜欢的主题，然后点进去他的github下载源码到自己博客的themes文件夹下。因为每个人的审美不同，我自己的主题也是自己一步步配置的，找到自己喜欢的主题进去他的主题源码有个markdown文件教你怎么配置的了。在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p><p><strong>所以我总结的配置主题方法就是找到自己喜欢的主题然后打开他的说明markdown文档以及上作者主题的GitHub查看Issue看看别人出现问题怎么解决自己有没出现，也可以去<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官方文档</a>查看博客主题配置，这样才能配置出自己喜欢的主题，下面我总结以下通用主题的配置方式</strong></p><h4 id="1-添加背景动画"><a href="#1-添加背景动画" class="headerlink" title="(1)添加背景动画"></a>(1)添加背景动画</h4><p>在\themes\{你的主题名}\layout\layout.ejs的*&lt;/*body&gt;后中面添加</p><p><img src="http://ww1.sinaimg.cn/large/0073y0I6gy1gfsxvkal59j30wi01eglo.jpg" alt=""></p><h4 id="2-添加404页面"><a href="#2-添加404页面" class="headerlink" title="(2)添加404页面"></a>(2)添加404页面</h4><p>在\blog\themes\{你的主题名}\source 下新建404.html文件，404文件的样式源码可以自己上网搜我的是<a href="https://404.life/" target="_blank" rel="noopener">404源码</a></p><p>然后引入对应的css文件和images文件就行了</p><h4 id="4-后台管理插件hexo-admin"><a href="#4-后台管理插件hexo-admin" class="headerlink" title="(4)后台管理插件hexo-admin"></a>(4)后台管理插件hexo-admin</h4><p>Github：<a href="https://github.com/jaredly/hexo-admin" target="_blank" rel="noopener">https://github.com/jaredly/hexo-admin</a></p><p>简介：可以直接在网页端创建、编辑markdown文章内容，并将内容发布到_posts里。最方便的是可以很方便的给文章加标题、分类、打标签。配置按照它的官网操作进行了</p><h3 id="套Cloudflare"><a href="#套Cloudflare" class="headerlink" title="套Cloudflare"></a>套Cloudflare</h3><p>简单说Cloudflare免费提供cdn服务即可以使你的网站访问加速，并且自定义域名提供免费的 https 服务而不会通过域名访问时显示网站不安全的提示。</p><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>进入<a href="https://www.cloudflare.com/" target="_blank" rel="noopener">Cloudflare</a>官网，然后填入个人域名选择免费套餐</p><p><img src="http://ww1.sinaimg.cn/large/0073y0I6gy1ggat90lfsoj31g80ck3z7.jpg" alt=""></p><p><img src="http://ww1.sinaimg.cn/large/0073y0I6gy1ggat9k8832j30yr0gcgmg.jpg" alt=""></p><p>接着这一步如果你已经在域名服务商那里解析过域名的话，就会出现你域名的解析列表（下图是我的另一个域名没有解释）</p><p><img src="http://ww1.sinaimg.cn/large/0073y0I6gy1ggata2ue62j30ts0jkgmg.jpg" alt=""></p><p>点击下一步 Cloudflare 会有非常详细的提示，回到域名管理删除默认的域名服务器替代为CloundFlare名称服务器</p><p><img src="http://ww1.sinaimg.cn/large/0073y0I6gy1ggathdi7fxj30wb0o5q4b.jpg" alt=""></p><p><img src="http://ww1.sinaimg.cn/large/0073y0I6gy1ggatt11i23j30of0pyada.jpg" alt=""></p><p>几个小时后就能颁发证书成功，你可以登录Cloudflare看一下也可以打开自己的博客网站然后打开开发者工具按Network，点击左边的name对应的域名查看右边的Heders的server已经是cloudflare代表已经成功了</p><p><img src="http://ww1.sinaimg.cn/large/0073y0I6gy1ggattg1tuaj30sn0ku76h.jpg" alt=""></p><h3 id="第一篇博客编写"><a href="#第一篇博客编写" class="headerlink" title="第一篇博客编写"></a>第一篇博客编写</h3><p>博客编写建议使用现在主流的markdown形式，markdown软件建议使用Typora编写或者用你的编辑器写也行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;hello blog&quot;</span><br></pre></td></tr></table></figure><p>输入这条命令后将会在blog\source_posts文件夹下看到helloblog.md文T件，打开他的源代码形式是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello blog  <span class="comment">//题目</span></span><br><span class="line">date: <span class="number">2020</span><span class="number">-06</span><span class="number">-14</span> <span class="number">19</span>:<span class="number">46</span>:<span class="number">42</span>  <span class="comment">//时间</span></span><br><span class="line">tags: <span class="comment">//标签</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>这是基本的文章配置，注意一定要按照这样的格式在开头编写文章的配置，更多的配置请参考自己对应的主题markdown说明文档补充。</p><p>然后就可以编写文章了，下面是简单的markdown语法及其快捷键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Typora快捷键整合</span><br><span class="line">Ctrl+1  一阶标题    Ctrl+B  字体加粗</span><br><span class="line">Ctrl+2  二阶标题    Ctrl+I  字体倾斜</span><br><span class="line">Ctrl+3  三阶标题    Ctrl+U  下划线</span><br><span class="line">Ctrl+4  四阶标题    Ctrl+Home   返回Typora顶部</span><br><span class="line">Ctrl+5  五阶标题    Ctrl+End    返回Typora底部</span><br><span class="line">Ctrl+6  六阶标题    Ctrl+T  创建表格</span><br><span class="line">Ctrl+L  选中某句话   Ctrl+K  创建超链接</span><br><span class="line">Ctrl+D  选中某个单词  Ctrl+F  搜索</span><br><span class="line">Ctrl+E  选中相同格式的文字   Ctrl+H  搜索并替换</span><br><span class="line">Alt+Shift+5 删除线 Ctrl+Shift+I    插入图片</span><br><span class="line">Ctrl+Shift+M    公式块 Ctrl+Shift+Q    引用</span><br><span class="line">注：一些实体符号需要在实体符号之前加”\”才能够显示</span><br></pre></td></tr></table></figure><h4 id="图床准备"><a href="#图床准备" class="headerlink" title="图床准备"></a>图床准备</h4><p>这里我推荐使用微博图床，下面看我的超级简单方法</p><p>（1）安装这个浏览器插件<a href="https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf?hl=zh-CN" target="_blank" rel="noopener">新浪微博图床</a>然后简直白嫖一样，点击插件然后在浏览器上登录自己的微博就能用了，图片不会存在自己微博的相册中也不会自动发微博啥的，然后点击这个插件还可以查看自己的历史图片</p><p><img src="http://ww1.sinaimg.cn/large/0073y0I6gy1gfs5aai47gj30lu0f30t6.jpg" alt=""></p><p>然后拉进去就可以快乐插图片继续写文章了</p><h4 id="发布文章准备"><a href="#发布文章准备" class="headerlink" title="发布文章准备"></a>发布文章准备</h4><p>建议首先依次输入这三条指令本地查看一下先</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &#x2F;&#x2F;清除缓存文件 db.json 和已生成的静态文件 public网站显示异常时可以执行这条命令试试。</span><br><span class="line"></span><br><span class="line">hexo g &#x2F;&#x2F;生成网站静态文件到默认设置的 public 文件夹。</span><br><span class="line">&#x2F;&#x2F;便于查看网站生成的静态文件或者手动部署网站；如果使用自动部署，</span><br><span class="line">&#x2F;&#x2F;不需要先执行该命令hexo g 是 hexo generate 的缩写，命令效果一致。</span><br><span class="line"></span><br><span class="line">hexo s &#x2F;&#x2F;启动本地服务器，用于预览主题。默认地址： http:&#x2F;&#x2F;localhost:4000&#x2F;hexo s 是 hexo server 的缩写，</span><br><span class="line">&#x2F;&#x2F;命令效果一致；预览的同时可以修改文章内容或主题代码，保存后刷新页面即可；对 Hexo 根目录 _config.yml 的修改，</span><br><span class="line">&#x2F;&#x2F;需要重启本地服务器后才能预览效果。</span><br></pre></td></tr></table></figure><p>感觉没问题后执行hexo d把它部署到自己的GitHub仓库中，接着我们就能在网上输入自己的域名查看效果了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d &#x2F;&#x2F;自动生成网站静态文件，并部署到设定的仓库。hexo d 是 hexo deploy 的缩写，命令效果一致。</span><br></pre></td></tr></table></figure><p>之后我们常用的hexo组合指令是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>然后就大功告成了，谢谢阅读！</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Oct 29 2020 16:33:45 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;​ 本博客
      
    
    </summary>
    
    
      <category term="hexo博客搭建" scheme="http://180231.xyz/categories/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="http://180231.xyz/tags/hexo/"/>
    
      <category term="GitHub" scheme="http://180231.xyz/tags/GitHub/"/>
    
      <category term="博客" scheme="http://180231.xyz/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
